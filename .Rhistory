blogdown::serve_site()
blogdown::hugo_version()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
install.packages("widgetframe")
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
vignette('programming')
blogdown::serve_site()
blogdown::serve_site()
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
blogdown::serve_site()
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
install.packages('bookdown')
blogdown::serve_site()
blogdown:::new_post_addin()
blogdown::serve_site()
blogdown:::new_post_addin()
blogdown:::new_post_addin()
blogdown:::new_post_addin()
blogdown::serve_site()
blogdown::serve_site()
blogdown:::new_post_addin()
library(htmltools)
div(HTML("I like <u>turtles</u>"))
HTML('<meta http-equiv="refresh" content="0; URL='http://new-website.com'" />')
HTML('<meta http-equiv="refresh" content="0; URL=\'http://new-website.com\'" />')
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown:::new_post_addin()
blogdown::serve_site()
library(stringr)
Letters
LETTERS
letters
## 특정 단어 찾기
stringr::words
stringr::fruit
stringr::sentences
## 특정 단어 찾기
stringr::words
test_sentence <- '아버지가방에들어가신다'
str_locate(test_sentence, '가방')
str_locate(test_sentence, '가방들어')
str_locate(test_sentence, '가방에에')
str_locate(test_sentence, '가방에')
str_locate_all(test_sentence, '가방')
list(test_sentence, test_sentence, test_sentence)
str_locate_all(list(test_sentence, test_sentence, test_sentence), '가방')
str_locate(list(test_sentence, test_sentence, test_sentence), '가방에') # 문장에서 패턴에 해당하는 문자가 등장하는 지점부터 끝나는 지점까지의 위치를 반환
str_locate(list(test_sentence, test_sentence, test_sentence), '가방에') %>% class()
str_locate_all(list(test_sentence, test_sentence, test_sentence), '가방') %>% class()
str_locate(words, 'stay')
str_locate(head(words), 'area')
str_locate(head(words,100), 'area')
library(dplyr)
str_locate(head(words,100), 'area') %>% as_tibble()
stringr::words
str_locate(head(words), 'a') %>% as_tibble()
str_extract(head(words), 'a')
str_extract_all(head(words), 'a') # 패턴에 해당하는 글자가 존재하면 그 글자를 반환
str_extract_all(head(words), 'a', simplify = T) # ~all 함수는 출력값이 list형
str_match(head(words), 'a')
head(words)
str_extract(head(words), 'ab') # 패턴에 해당하는 글자가 존재하면 그 글자를 반환
str_extract_all(head(words), 'ab') # ~all 함수는 출력값이 list형
str_extract_all(head(words), 'ab', simplify = T) # ~all 함수는 출력값이 list형
str_extract_all(head(words), 'ab', simplify = T) # 'slimplyfy = T' 옵션은 반환을 matrix로 해준다.
str_extract_all(head(words), 'ab') # ~all 함수는 출력값이 list형
str_match(head(words), 'a')
str_match(head(words), 'ab')
head(words)
str_match(head(words), 'abo')
str_extract(head(words), 'abo')
str_locate(head(words), 'abo')
str_match(head(words), 'abo')
str_match_all(head(words), 'abo')
str_match_all(head(words), 'abo', simplyfy = T) # str_extract_all() 함수와 동일 기능
str_match_all(head(words), 'abo') # str_extract_all() 함수와 동일 기능
str_extract_all(head(words), 'ab', simplify = T) # 'slimplyfy = T' 옵션은 반환을 matrix로 해준다.
str_extract_all(head(words), 'ab') # ~all 함수는 출력값이 list형
str_match_all(head(words), 'abo', simplyfy = T) # str_extract_all() 함수와 동일 기능
str_extract_all(head(words), 'ab') # ~all 함수는 출력값이 list형
str_match_all(head(words), 'abo') # str_extract_all() 함수와 동일 기능
str_extract(head(words), 'abo') # 패턴에 해당하는 글자가 존재하면 그 글자를 반환
str_extract_all(head(words), 'abo') # ~all 함수는 출력값이 list형
str_match_all(head(words), 'abo') # str_extract_all() 함수와 동일 기능
str_extract_all(head(words), 'abo', simplify = T) # 'slimplyfy = T' 옵션은 반환을 matrix로 해준다.
str_extract(head(words), 'abo') # 패턴에 해당하는 글자가 존재하면 그 글자를 반환
str_match(head(words), 'abo') # str_extract() 함수와 동일 기능
str_extract_all(head(words), 'abo', simplify = T) # 'slimplyfy = T' 옵션은 반환을 matrix로 해준다.
str_match_all(head(words), 'abo') # str_extract_all() 함수와 동일 기능
str_match_all(head(words), 'abo') %>% class() # str_extract_all() 함수와 동일 기능
str_extract_all(head(words), 'abo', simplify = T) # 'slimplyfy = T' 옵션은 반환을 matrix로 해준다.
str_match_all(head(words), 'abo') %>% unlist() # str_extract_all() 함수와 동일 기능
str_extract(head(words), 'abo') %>% class() # 패턴에 해당하는 글자가 존재하면 그 글자를 반환, 반환결과는 vector표기
str_extract_all(head(words), 'abo') # ~all 함수는 출력값이 list형
str_extract_all(head(words), 'abo') %>% class()
str_extract_all(head(words), 'abo', simplify = T) %>% class() # 'slimplyfy = T' 옵션은 반환을 matrix로 해준다.
str_match(head(words), 'abo') # str_extract() 함수와 동일 기능 , 반환결과는 matrix
str_match_all(head(words), 'abo') # str_extract_all() 함수와 동일 기능
str_locate(test_sentence, '가방에') # 문장에서 패턴에 해당하는 문자가 등장하는 지점부터 끝나는 지점까지의 위치를 반환
str_locate_all(list(test_sentence, test_sentence, test_sentence), '가방') # ~all 함수는 list형식으로 반환
str_locate(head(words), 'a') %>% as_tibble() # 의미와는 상관없이 해당하는 글자가 존재하면 무조건 표기함
## 특정 단어 변환
str_replace(head(words), pattern = 'abo', replacement = 'z')
## 특정 단어 변환
str_replace(string = head(words), pattern = 'abo', replacement = 'z')
## 특정 단어 변환
str_replace(string = head(words),
pattern = 'abo',
replacement = 'z') %>% class()
str_replace_all(string = head(words),
pattern = 'abo',
replacement = 'z') # "string"에서 "pattern"에 해당하는 값을 "replacement" 값으로 바꿔준다. 출력값은 character vector
str_replace_all(string = head(words),
pattern = 'abo',
replacement = 'z') %>% class()# "string"에서 "pattern"에 해당하는 값을 "replacement" 값으로 바꿔준다. 출력값은 character vector
## 특정 단어 변환
str_replace(string = head(words),
pattern = c('a','b'),
replacement = 'z') # "string"에서 "pattern"에 해당하는 값을 "replacement" 값으로 바꿔준다. 출력값은 character vector
## 특정 단어 변환
str_replace(string = head(words),
pattern = c('a','b','o'),
replacement = 'z') # "string"에서 "pattern"에 해당하는 값을 "replacement" 값으로 바꿔준다. 출력값은 character vector
str_replace_all(string = head(words),
pattern = c('a','b','o'),
replacement = 'z')# "string"에서 "pattern"에 해당하는 값을 "replacement" 값으로 바꿔준다. 출력값은 character vector
str_replace_all(string = head(words),
pattern = c('a,b,o'),
replacement = 'z')# "string"에서 "pattern"에 해당하는 값을 "replacement" 값으로 바꿔준다. 출력값은 character vector
str_replace_all(string = head(words),
pattern = c('a|b|o'),
replacement = 'z')# "string"에서 "pattern"에 해당하는 값을 "replacement" 값으로 바꿔준다. 출력값은 character vector
## 특정 단어 변환
str_replace(string = head(words),
pattern = c('a|b|o'),
replacement = 'z') # "string"에서 "pattern"에 해당하는 값을 "replacement" 값으로 바꿔준다. 출력값은 character vector
## 특정 단어 변환
str_replace(string = head(words),
pattern = c('a|b|o'),
replacement = 'z') # "string"에서 "pattern"에 해당하는 값을 "replacement" 값으로 바꿔준다. 출력값은 character vector
str_replace_all(string = head(words),
pattern = c('a|b|o'),
replacement = 'z')# str_replace() 함수는 패턴에 해당하는 첫번째 값만 변환하는 반면, str_replace_all()함수는 패턴에 해당하는 모든 값을 변환해준다
blogdown:::new_post_addin()
blogdown::serve_site()
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
servr::daemon_stop(1)
blogdown::serve_site()
blogdown::serve_site
blogdown::serve_site()
serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
see <- function(rx, match) str_view_all("abc ABC 123\t.!?\\(){}\n", rx)
see('a*')
library(rvest)
library(dplyr)
library(stringr)
library(knitr)
see('Ab+')
library(blogdown)
blogdown::serve_site()
